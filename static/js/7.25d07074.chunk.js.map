{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/common/FormsControls/FormsControls.module.css","components/common/Captcha/Captcha.jsx","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","maxLength10","maxLength100","FormControl","input","meta","el","textAfter","textBefore","restProps","hasError","touched","error","className","cn","classes","formControl","React","createElement","Textarea","props","Input","text","Checkbox","createField","placeholder","name","validators","component","type","validate","FormError","formSummaryError","module","exports","Captcha","captchaUrl","src","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Login","isAuth","to","formData","authorizeByLogin","connect","state","getIsAuth","getCaptcha"],"mappings":"oHAAA,sGAAO,IAAMA,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGLC,EAAmB,SAACC,GAAD,OAAe,SAACF,GACrC,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAIrBE,EAAcH,EAAiB,IAE/BI,EAAeJ,EAAiB,M,2SCPvCK,EAAc,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,GAAIC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,WAAeC,EAAgB,8DACxEC,EAAWL,EAAKM,SAAWN,EAAKO,MACtC,OACI,yBAAKC,UAAWC,IAAGC,IAAQC,YAAT,eAAwBD,IAAQH,MAAQF,KACrDF,GAAc,2BAAIA,EAAJ,MAAuBS,IAAMC,cAAcZ,EAApB,2BAA6BF,GAAUK,IAAcF,EAC1FG,GAAY,8BAAOL,EAAKO,SAKxBO,EAAW,SAACC,GAAD,OAAW,kBAACjB,EAAD,eAAaG,GAAG,YAAec,KACrDC,EAAQ,SAACD,GAAD,OAAW,kBAACjB,EAAD,eAAaG,GAAG,QAAQE,WAAYY,EAAME,MAAUF,KACvEG,EAAW,SAACH,GAAD,OAAW,kBAACjB,EAAD,eAAaG,GAAG,QAAQC,UAAWa,EAAME,MAAWF,KAG1EI,EAAc,SAACC,EAAaC,EAAMC,EAAYC,EAAWC,GAClE,OAAO,kBAAC,IAAD,CAAOJ,YAAaA,EAAaC,KAAMA,EAAMI,SAAQ,YAAMH,GAAaC,UAAWA,EAAWC,KAAMA,KAGlGE,EAAY,SAAC,GAAa,IAAZnB,EAAW,EAAXA,MACvB,OAAO,yBAAKC,UAAWE,IAAQiB,kBAC1BpB,K,oBCzBTqB,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,8GCG9GC,EAAU,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACrB,OAAO,6BAAK,yBAAKC,IAAKD,IAAeZ,YAAY,2BAA4B,UAAW,CAAC5B,KAAWyB,OCmClGiB,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EAnBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc7B,EAAuB,EAAvBA,MAAOwB,EAAgB,EAAhBA,WACrC,OAAO,0BAAMM,SAAUD,GACf,6BACKjB,YAAY,QAAS,QAAS,CAAC5B,KAAWyB,MAE/C,6BACKG,YAAY,WAAY,WAAY,CAAC5B,KAAWyB,IAAO,aAE5D,6BACKG,YAAY,KAAM,aAAc,IAAI,SAACJ,GAAD,OAAW,kBAAC,IAAD,iBAAcA,EAAd,CAAqBE,KAAM,mBAAmB,aAEjGc,GAAc,kBAAC,EAAD,CAASA,WAAYA,IACnCxB,GAAS,kBAAC,IAAD,CAAWA,MAAOA,IAC5B,6BACI,8CAOD+B,EAlCD,SAACvB,GAKX,OAAIA,EAAMwB,OAAe,kBAAC,IAAD,CAAUC,GAAI,aAEhC,6BACH,qCACA,kBAACP,EAAD,CAAgBI,SARH,SAACI,GACd1B,EAAM2B,iBAAiBD,IAOeV,WAAYhB,EAAMgB,e,QCJjDY,uBAPO,SAACC,GACnB,MAAO,CACHL,OAAQM,YAAUD,GAClBb,WAAYe,YAAWF,MAIS,CACpCF,sBADWC,CAEZL","file":"static/js/7.25d07074.chunk.js","sourcesContent":["export const required = (value) => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n} \r\n\r\nconst maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreator(10);\r\n\r\nexport const maxLength100 = maxLengthCreator(100);\r\n\r\n","import React from 'react';\r\nimport { Field } from 'redux-form';\r\nimport classes from './FormsControls.module.css';\r\nimport cn from 'classnames';\r\n\r\nconst FormControl = ({ input, meta, el, textAfter, textBefore, ...restProps }) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={cn(classes.formControl, {[classes.error]: hasError})}>\r\n            {textBefore && <b>{textBefore}: </b>}{React.createElement(el, { ...input, ...restProps })}{textAfter}\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => <FormControl el='textarea' {...props} />\r\nexport const Input = (props) => <FormControl el='input' textBefore={props.text} {...props} />\r\nexport const Checkbox = (props) => <FormControl el='input' textAfter={props.text}  {...props} />\r\n\r\n\r\nexport const createField = (placeholder, name, validators, component, type) => {\r\n    return <Field placeholder={placeholder} name={name} validate={[...validators]} component={component} type={type} />\r\n}\r\n\r\nexport const FormError = ({error}) => {\r\n    return <div className={classes.formSummaryError}>\r\n        {error}\r\n    </div>\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__LxQGF\",\"error\":\"FormsControls_error__3o3tP\",\"formSummaryError\":\"FormsControls_formSummaryError__3QUKy\"};","import React from 'react';\r\nimport { required } from '../../../utils/validators/validators';\r\nimport { createField, Input } from '../FormsControls/FormsControls';\r\n\r\nexport const Captcha = ({captchaUrl}) => {\r\n    return <div><img src={captchaUrl} />{createField('enter numbers in picture', 'captcha', [required], Input)}</div>\r\n}","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Checkbox, createField, FormError, Input } from '../common/FormsControls/FormsControls';\r\nimport { required } from '../../utils/validators/validators';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Captcha } from '../common/Captcha/Captcha';\r\n\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.authorizeByLogin(formData);\r\n    }\r\n\r\n    if (props.isAuth) return <Redirect to={'/profile'} />;\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={ onSubmit } captchaUrl={props.captchaUrl} />\r\n    </div>\r\n}\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField('Login', 'email', [required], Input)}\r\n            </div>\r\n            <div>\r\n                {createField('Password', 'password', [required], Input, 'password')}\r\n            </div>\r\n            <div>   \r\n                {createField(null, 'rememberMe', [], (props) => <Checkbox {...props} text={'Remember me'} />, 'checkbox')}\r\n            </div> \r\n            {captchaUrl && <Captcha captchaUrl={captchaUrl} />}\r\n            {error && <FormError error={error} />}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login',})(LoginForm)\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {authorizeByLogin} from '../../redux/auth-reducer';\r\nimport Login from './Login';\r\nimport { getCaptcha, getIsAuth } from '../../redux/auth-selectors';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: getIsAuth(state),\r\n        captchaUrl: getCaptcha(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    authorizeByLogin,\r\n})(Login);\r\n"],"sourceRoot":""}